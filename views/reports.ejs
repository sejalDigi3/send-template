
<%- include('partials/head.ejs') %>

<body>
  <style>
    .table td {
      max-width: 200px;
      /* Adjust the width as needed */
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: normal;
      word-wrap: break-word;
    }

  </style>
  <div class="container-scroller">
    <%- include('partials/navbar.ejs') %>
    <div class="container-fluid page-body-wrapper">
      <%- include('partials/sidebar.ejs') %>
      <div class="main-panel">
        <div class="content-wrapper">
          <div class="page-header">
            <h3 class="page-title">
              <span class="page-title-icon bg-gradient-primary text-white me-2">
                <i class="mdi mdi-home"></i>
              </span> Reports
            </h3>
          </div>
          <div class="row">
              <!-- Filter section -->
        <div class="col-lg-12">
          <div class="card">
            <div class="card-body">
              <h4 class="card-title" style="margin-top: 64px;">Filter Options</h4>
              <div class="row">
                <div class="col-md-3">
                  <div class="form-group">
                    <label for="filterType">Select Filter Type</label>
                    <select class="form-control" id="filterType" onchange="applyFilter()">
                      <option value="day">Day</option>
                      <option value="month">Month</option>
                      <option value="half_data">Half Data</option>
                    </select>
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="form-group">
                    <label for="startDate">Start Date</label>
                    <input type="date" class="form-control" id="startDate">
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="form-group">
                    <label for="endDate">End Date</label>
                    <input type="date" class="form-control" id="endDate">
                  </div>
                </div>
                <div class="col-md-3">
                  <button class="btn btn-primary mt-4" onclick="applyFilter()">Apply Filter</button>
                </div>
              </div>
            </div>
          </div>
        </div>
            <div class="col-lg-12 grid-margin stretch-card">
              <div class="card">
                <div class="card-body" style="padding: -10.5rem 2.5rem;">
                  <h4 class="card-title">
<!-- Add PDF download button -->
    <button id="downloadPdfButton" class="btn btn-primary" style="color: #ffffff;
    margin-left: 645px;margin-top: -900px;" onclick="downloadPdf()">Download Report</button>
                  </h4>

                  <table id="data-table" class="table">
                    <thead>
                      <tr>
                        <th scope="col">Start Date</th>
                        <th scope="col">End Date</th>
                        <th scope="col" style="background-color: #fff1f1;">Sent Messages</th>
                        <th scope="col" style="background-color: #d5f5d6;">Delivered Messages</th>
                      </tr>
                    </thead>
                    <tbody>
                      <!-- Data will be inserted here -->
                    </tbody>
                  </table>
                  <div class="selectPageOptionAndPaging">
                    <select id="pageSelect"></select>
                  </div>
                  <div id="pagination">
                    <button class="button-12" id="prevButton">Previous</button>
                    <span id="pageInfo">Page 1</span>
                    <button class="button-12" id="nextButton">Next</button>
                  </div>

                  <script>

    const secondApiUrl = 'https://graph.facebook.com/v19.0/116168451372633';

    async function fetchSecondData() {
        try {
            const response = await fetch(secondApiUrl, {
                          headers: {
                            Authorization: `Bearer EAAWqeZCMrJ6sBO0X7XRm9sUzT9VDnllTw54ul2YUHhh5UW8IdzCWZAQLSsNomFx6cBQJbWt7Kzsad6MnAE8Ge64EnMRALBpirjamhEXC56gxj4eZBrCV2BQoNZAkb2ZCPs8ZCEm5iq5DFvVFOhRgVo9NCx7z9TuogsSliZBv4wqrvQdm14DnzI8HyZAUkmT5yJYzwJgMwEWPcKRvA7DF`,
                            "Content-Type": "application/json",
                          }
                        });
            const data = await response.json();
            console.log("Second dataaaaaaaaqa", data);
            displaySecondData(data);
        } catch (error) {
            console.error('Error fetching second data:', error);
        }
    }


    function displaySecondData(data) {
    const phoneNumber = data.display_phone_number;
    const verifiedName = data.verified_name;
    const codeVerificationStatus = data.code_verification_status;
    const qualityRating = data.quality_rating;
    const platformType = data.platform_type;
    const throughputLevel = data.throughput.level;

    // Create a div element to contain the business information
    const businessInfoContainer = document.createElement('div');
    businessInfoContainer.setAttribute('id', 'business-info');

    // Create a paragraph element for each piece of information
    const phoneNumberElement = document.createElement('p');
phoneNumberElement.innerHTML = `<strong>Phone Number:</strong> ${phoneNumber}`;
businessInfoContainer.appendChild(phoneNumberElement)

const verifiedNameElement = document.createElement('p');
verifiedNameElement.innerHTML = `<strong>Verified Name:</strong> <span style="font-weight: bold; color: blue;">${verifiedName}</span>`;
businessInfoContainer.appendChild(verifiedNameElement);

const codeVerificationStatusElement = document.createElement('p');
codeVerificationStatusElement.innerHTML = `<strong>Code Verification Status:</strong> ${codeVerificationStatus}`;
businessInfoContainer.appendChild(codeVerificationStatusElement);

const qualityRatingElement = document.createElement('p');
qualityRatingElement.innerHTML = `<strong>Quality Rating:</strong> ${qualityRating}`;
businessInfoContainer.appendChild(qualityRatingElement);

const platformTypeElement = document.createElement('p');
platformTypeElement.innerHTML = `<strong>Platform Type:</strong> ${platformType}`;
businessInfoContainer.appendChild(platformTypeElement);

const throughputLevelElement = document.createElement('p');
throughputLevelElement.innerHTML = `<strong>Throughput Level:</strong> ${throughputLevel}`;
businessInfoContainer.appendChild(throughputLevelElement);


    // Insert the business information container above the table
    const cardBody = document.querySelector('.card-body');
    cardBody.insertBefore(businessInfoContainer, cardBody.firstChild);
}

    fetchSecondData();
                    const apiUrl = 'https://graph.facebook.com/v19.0/104022815935352?fields=analytics.start(1706789602).end(1709295202).granularity(DAY).phone_numbers([]).country_codes(["IN"])';

                    const itemsPerPage = 10; // Number of items to display per page
                    let currentPage = 1;
                    let totalData = [];
                    const tableBody = document.querySelector('#data-table tbody');
                    const pageSelect = document.getElementById('pageSelect');

                    async function fetchData(page) {
                      try {
                        const response = await fetch(apiUrl, {
                          headers: {
                            Authorization: `Bearer EAAWqeZCMrJ6sBO0X7XRm9sUzT9VDnllTw54ul2YUHhh5UW8IdzCWZAQLSsNomFx6cBQJbWt7Kzsad6MnAE8Ge64EnMRALBpirjamhEXC56gxj4eZBrCV2BQoNZAkb2ZCPs8ZCEm5iq5DFvVFOhRgVo9NCx7z9TuogsSliZBv4wqrvQdm14DnzI8HyZAUkmT5yJYzwJgMwEWPcKRvA7DF`,
                            "Content-Type": "application/json",
                          }
                        });

                        const data = await response.json();
                        if (data.analytics && data.analytics.data_points && data.analytics.data_points.length > 0) {
                          totalData = data.analytics.data_points; // Store all data
                          renderData();
                        } else {
                          console.error('No data found.');
                        }
                      } catch (error) {
                        console.error('Error fetching data:', error);
                      }
                    }

                    // // Function to render data in the table
                    // function renderData() {
                    //   const startIndex = (currentPage - 1) * itemsPerPage;
                    //   const endIndex = Math.min(startIndex + itemsPerPage, totalData.length);
                    //   const itemsToDisplay = totalData.slice(startIndex, endIndex);

                    //   tableBody.innerHTML = ''; // Clear the table body

                    //   itemsToDisplay.forEach(item => {
                    //     const row = tableBody.insertRow();
                    //     const startCell = row.insertCell(0);
                    //     const endCell = row.insertCell(1);
                    //     const sentCell = row.insertCell(2);
                    //     const deliveredCell = row.insertCell(3);

                    //     startCell.textContent = new Date(item.start * 1000).toLocaleDateString();
                    //     endCell.textContent = new Date(item.end * 1000).toLocaleDateString();
                    //     sentCell.textContent = item.sent || 'N/A';
                    //     deliveredCell.textContent = item.delivered || 'N/A';
                    //   });

                    //   // Update page info
                    //   const pageInfo = document.getElementById('pageInfo');
                    //   pageInfo.textContent = `Page ${currentPage}`;

                    //   // Populate the select box with page numbers
                    //   populatePageSelect();
                    // }

                    // Function to render data in the table

function renderData() {
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = Math.min(startIndex + itemsPerPage, totalData.length);

  if (totalData.length === 0) {
    // If no data found, display an error message or default message
    tableBody.innerHTML = `<tr><td colspan="4">No data found for selected filter.</td></tr>`;
  } else {
    const itemsToDisplay = totalData.slice(startIndex, endIndex);

    tableBody.innerHTML = ''; // Clear the table body

    itemsToDisplay.forEach(item => {
      const row = tableBody.insertRow();
      const startCell = row.insertCell(0);
      const endCell = row.insertCell(1);
      const sentCell = row.insertCell(2);
      const deliveredCell = row.insertCell(3);

      startCell.textContent = new Date(item.start * 1000).toLocaleDateString();
      endCell.textContent = new Date(item.end * 1000).toLocaleDateString();
      sentCell.textContent = item.sent || 'N/A';
      deliveredCell.textContent = item.delivered || 'N/A';
    });
  }

  // Update page info
  const pageInfo = document.getElementById('pageInfo');
  pageInfo.textContent = `Page ${currentPage}`;

  // Populate the select box with page numbers
  populatePageSelect();
}


                    // Function to populate the select box with page numbers
                    function populatePageSelect() {
                      const pageCount = Math.ceil(totalData.length / itemsPerPage);
                      pageSelect.innerHTML = '';
                      for (let i = 1; i <= pageCount; i++) {
                        const option = document.createElement('option');
                        option.value = i;
                        option.textContent = `Page ${i}`;
                        pageSelect.appendChild(option);
                      }
                      pageSelect.value = currentPage;
                    }

                    // Event listener for previous button
                    document.getElementById('prevButton').addEventListener('click', () => {
                      if (currentPage > 1) {
                        currentPage--;
                        renderData();
                      }
                    });

                    // Event listener for next button
                    document.getElementById('nextButton').addEventListener('click', () => {
                      const startIndex = (currentPage - 1) * itemsPerPage;
                      if (startIndex + itemsPerPage < totalData.length) {
                        currentPage++;
                        renderData();
                      }
                    });

                    // Event listener for page select
                    pageSelect.addEventListener('change', () => {
                      currentPage = parseInt(pageSelect.value);
                      renderData();
                    });

                    // Initial data load
                    fetchData(currentPage);


                function downloadPdf() {
  // Get the element containing the table content
  const element = document.getElementById('data-table');

  // Clone the business information element
  const businessInfo = document.getElementById('business-info');
  if (businessInfo) {
    element.appendChild(businessInfo.cloneNode(true)); // Clone the business info to avoid affecting the original document
  }

  // Options for pdf generation (optional)
  const options = {
    margin: 1,
    filename: 'report.pdf',
    image: { type: 'jpeg', quality: 0.98 },
    html2canvas: { scale: 2 },
    jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
  };

  // Generate PDF from the element
  html2pdf().from(element).set(options).save();
}



// Define the base URL of your API
const baseUrl = 'https://graph.facebook.com/v19.0/104022815935352?';

// Function to fetch data based on filter type
async function fetchDataByFilter(filterType) {
      let startDateInput = document.getElementById('startDate').value;
    let endDateInput = document.getElementById('endDate').value;
    let granularity = '';

    // Parse the input dates in the correct format
    let startDateParts = startDateInput.split('-');
    let endDateParts = endDateInput.split('-');

    // Construct the Date objects using the parsed parts
    let startDate = new Date(startDateParts[0], startDateParts[1] - 1, startDateParts[2]);
    let endDate = new Date(endDateParts[0], endDateParts[1] - 1, endDateParts[2]);

    switch (filterType) {
        case 'day':
            granularity = 'DAY';
            break;
        case 'month':
            granularity = 'MONTH';
            break;
        case 'half_data':
            granularity = 'HALF_HOUR';
            break;
        default:
            // Default to day if filter type is not recognized
            granularity = 'DAY';
            break;
    }

    // Convert selected start and end dates to Unix timestamps
    let startUnixTimestamp = Math.floor(startDate.getTime() / 1000);
    let endUnixTimestamp = Math.floor(endDate.getTime() / 1000);
    const apiUrl = `${baseUrl}fields=analytics.start(${startUnixTimestamp}).end(${endUnixTimestamp}).granularity(${granularity}).phone_numbers([]).country_codes(["IN"])`;

    try {
        const response = await fetch(apiUrl, {
            headers: {
                Authorization: `Bearer EAAWqeZCMrJ6sBO0X7XRm9sUzT9VDnllTw54ul2YUHhh5UW8IdzCWZAQLSsNomFx6cBQJbWt7Kzsad6MnAE8Ge64EnMRALBpirjamhEXC56gxj4eZBrCV2BQoNZAkb2ZCPs8ZCEm5iq5DFvVFOhRgVo9NCx7z9TuogsSliZBv4wqrvQdm14DnzI8HyZAUkmT5yJYzwJgMwEWPcKRvA7DF`,
                "Content-Type": "application/json",
            }
        });

        const data = await response.json();
        if (data.analytics && data.analytics.data_points && data.analytics.data_points.length > 0) {
            totalData = data.analytics.data_points; // Store all data
            renderData();
        } else {
            console.error('No data found.');
        }
    } catch (error) {
        console.error('Error fetching data:', error);
    }
}

// Function to apply the selected filter
function applyFilter() {
    const filterType = document.getElementById('filterType').value;
    fetchDataByFilter(filterType);
}
                  </script>

                </div>
              </div>
            </div>
          </div>
        </div>
        <%- include('partials/footer.ejs') %>
      </div>
    </div>
  </div>

</body>
<%- include('partials/scripts.ejs') %>

</html>
